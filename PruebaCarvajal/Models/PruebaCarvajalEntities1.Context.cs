//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PruebaCarvajal.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PruebaCarvajalEntities : DbContext
    {
        public PruebaCarvajalEntities()
            : base("name=PruebaCarvajalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Configuracion> Configuracion { get; set; }
        public virtual DbSet<DetalleCompra> DetalleCompra { get; set; }
        public virtual DbSet<EncabezadoCompra> EncabezadoCompra { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<LogEvents> LogEvents { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spActualizarInventario(Nullable<int> cantidadDisponible, Nullable<long> idProducto)
        {
            var cantidadDisponibleParameter = cantidadDisponible.HasValue ?
                new ObjectParameter("CantidadDisponible", cantidadDisponible) :
                new ObjectParameter("CantidadDisponible", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spActualizarInventario", cantidadDisponibleParameter, idProductoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spActualizarProducto(Nullable<long> idRecordProducto)
        {
            var idRecordProductoParameter = idRecordProducto.HasValue ?
                new ObjectParameter("IdRecordProducto", idRecordProducto) :
                new ObjectParameter("IdRecordProducto", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spActualizarProducto", idRecordProductoParameter);
        }
    
        public virtual int spReporteVentas(string opcion)
        {
            var opcionParameter = opcion != null ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReporteVentas", opcionParameter);
        }
    }
}
